name: Continuous Integration
on: [push, pull_request]
jobs:
  build:
    name: ${{matrix.os}}/${{matrix.build-type}}
    runs-on: ${{matrix.runs-on}}
    steps:
      - uses: actions/checkout@v4
      - name: Make build directory
        run: cmake -E make_directory build
      - name: Configure
        working-directory: build
        run: |
          $args = @(
            "-DSOURCE_URL=https://github.com/${{github.repository}}"
            "-DSOURCE_REF=${{github.sha}}"
            "-DCMAKE_BUILD_TYPE=${{matrix.build-type}}"
            "-DCMAKE_INSTALL_PREFIX=${{runner.temp}}/install"
            "-DCMAKE_OSX_ARCHITECTURES=${{matrix.arch}}"
            "-DCMAKE_OSX_DEPLOYMENT_TARGETS=10.11"
          )
          if ( "${{matrix.os}}" -eq "windows" ) {
            $args += "-DCMAKE_SYSTEM_VERSION=10.0.22621.0"
          }
          cmake .. @args
        shell: pwsh
      - name: Compile
        working-directory: build
        run: cmake --build . --parallel --config ${{matrix.build-type}} --verbose
      - name: Install Demos
        working-directory: build
        run: |
          cmake --install . --config ${{matrix.build-type}} --component Demos
      - name: Upload AudioDeviceLib.cmake
        if: "!startsWith(github.ref, 'refs/tags/v')"
        uses: actions/upload-artifact@v4
        with:
          name: AudioDeviceLib.cmake
          path: build/AudioDeviceLib.cmake
      - name: Upload Demos
        uses: actions/upload-artifact@v4
        if: ${{ matrix.build-type != 'Debug' }}
        with:
          name: demos-${{matrix.os}}-${{matrix.build-type}}
          path: ${{runner.temp}}/install/bin/
    strategy:
      fail-fast: false
      matrix:
        os: [windows, macos-arm64, macos-x86_64]
        build-type: [RelWithDebInfo, Debug]
        include:
          - os: windows
            runs-on: windows-latest
          - os: macos-arm64
            arch: arm64
            runs-on: macos-latest
          - os: macos-x86_64
            arch: x86_64
            runs-on: macos-latest
  make-zip:
    name: Create zip archive
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build zip
        run: |
          git archive \
            --format=zip \
            --prefix=AudioDeviceLib-"$(echo ${{github.ref}} | awk -F/ '{print $NF}')/" \
            -o AudioDeviceLib.zip \
            HEAD
      - name: Upload zip
        uses: actions/upload-artifact@v4
        with:
          name: AudioDeviceLib.zip
          path: AudioDeviceLib.zip
  make-cmake-file:
    name: Make release CMake file
    if: startsWith(github.ref, 'refs/tags/v')
    needs: make-zip
    runs-on: macos-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: AudioDeviceLib.zip
          path: ${{runner.temp}}/artifacts
      - run: ls -lR ${{runner.temp}}/artifacts
      - uses: actions/checkout@v4
      - name: Get raw tag name
        run: echo "VERSION=$(echo ${{github.ref}} | awk -F/ '{print $NF}')" >> $GITHUB_ENV
      - name: Configure
        run: |
          cmake . \
            -DSOURCE_URL_TYPE=URL \
            -DSOURCE_URL=https://github.com/${{github.repository}}/releases/download/${{env['VERSION']}}/AudioDeviceLib-${{ENV['VERSION']}}.zip \
            -DSOURCE_REF_TYPE=URL_HASH \
            -DSOURCE_REF=SHA512=$(openssl dgst -sha512 "${{runner.temp}}/artifacts/AudioDeviceLib.zip" | cut -f2 '-d ') \
            -DCMAKE_BUILD_TYPE=${{matrix.build-type}} \
            "-DCMAKE_INSTALL_PREFIX=$(echo "${{runner.temp}}/install" | tr "\\\\" /)"
        shell: bash
      - name: Upload AudioDeviceLib.cmake
        uses: actions/upload-artifact@v4
        with:
          name: AudioDeviceLib.cmake
          path: AudioDeviceLib.cmake
  create-release:
    name: Create Release
    needs: [make-zip, make-cmake-file, build]
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: List artifacts
        run: ls -lR
      - name: Get raw tag name
        run: echo "VERSION=$(echo ${{github.ref}} | awk -F/ '{print $NF}')" >> $GITHUB_ENV
      - name: Create draft release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{env['VERSION']}}
          release_name: Release ${{env['VERSION']}}
          draft: true
          prerelease: false
      - name: Add zip file to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/AudioDeviceLib.zip/AudioDeviceLib.zip
          asset_name: AudioDeviceLib-${{env['VERSION']}}.zip
          asset_content_type: application/zip
      - name: Add .cmake file to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/AudioDeviceLib.cmake/AudioDeviceLib.cmake
          asset_name: AudioDeviceLib.cmake
          asset_content_type: text/plain
  attach-demos-to-release:
    name: Attach demos to release
    needs: create-release
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: List artifacts
        run: ls -lR
      - name: Create Zip
        id: create-zip
        working-directory: artifacts/demos-${{matrix.os}}-${{matrix.build-type}}
        run: |
          VERSION="$(echo ${{github.ref}} | awk -F/ '{print $NF}')"
          ZIP_NAME="audiodevicelib-${VERSION}-demos-${{matrix.os}}-${{matrix.build-type}}.zip"
          ZIP_PATH="${{runner.temp}}/${ZIP_NAME}"
          7z a "${ZIP_PATH}"
          echo "::set-output name=name::${ZIP_NAME}"
          echo "::set-output name=path::${ZIP_PATH}"
      - name: Attach Zip to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-zip.outputs.path }}
          asset_name: ${{ steps.create-zip.outputs.name }}
          asset_content_type: application/zip
    strategy:
      fail-fast: false
      matrix:
        os: [windows, macos-arm64, macos-x86_64]
        build-type: [RelWithDebInfo]
